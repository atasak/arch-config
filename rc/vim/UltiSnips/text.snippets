snippet crash
Feedback:
Jullie programma crashed helaas bij $0

Lever bij de herkansing een versie in die wel goed werkt. 

Groeten, 
Niek Janssen
endsnippet

snippet opdracht 
Jullie opdracht ziet er $1 uit. $0
endsnippet

snippet gebruik
Jullie maken goed gebruik van $0
endsnippet

snippet functions
De code is netjes opgedeeld in meerdere functies. 
endsnippet

snippet vergeten
Jullie zijn alleen vergeten om $0
endsnippet

snippet groeten
Groeten,
Niek Janssen
endsnippet

snippet files
Je hebt helaas de verkeerde bestanden ingeleverd. Lever voortaan de .cpp files
in in plaats van de $1. 

Groeten, 
Niek Janssen
endsnippet

snippet overgenomen
Overgenomen van vorig jaar. 

Groeten, 
Niek Janssen
endsnippet

snippet door
Ga vooral zo door!
endsnippet

snippet fb
Feedback:
Opdracht 1:

Opdracht 2:

Opdracht 3: 

Groeten, 
Niek Janssen
endsnippet

snippet mis
Deze opdracht mis ik helaas bij jullie. Deze zullen jullie bij de herkansing in
moeten leveren op blackboard voordat ik jullie een voldoende kan geven. 
endsnippet

snippet compile
Jullie code compileert helaas niet. Lever een wel-compilerende code in bij de
herkansing op blackboard. 
endsnippet

snippet groupVariable
Het is vaak netter om alle variabelen in het begin van een functie te
declareren. Voorbeeld:
    
    Niet:
    ```
        int a = 0;
        do_something_with (a);
        int b = 0;
        do_something_with (b);
    ```
    Maar:
    ```
        int a = 0;
        int b = 0;

        do_something_with (a);
        do_something_with (b);
    ```
endsnippet

snippet assign
Jullie assignen a niet bij zijn declaratie. Het is een goede gewoonte om dat
ALTIJD te doen. Als je geen default-waarde hebt, kun je 0 gebruiken. Dus:

    Niet:
        ```int a;```
        
    Maar:
        ```int a = 0;```
endsnippet

snippet doubleIf
Jullie zetten dubbele code in de if-else. Dit kun je beter buiten de if-else
zetten. Dus:

    Niet:
    ```
        if (x)
        {
			a = 1;
			b = 2;
			c = 3;
        }
        else
        {
			a = 4;
			b = 2;
			c = 3;
        }
    ```
    Maar:
    ```
        if (x)
        {
			a = 1;
        }
        else
        {
			a = 4;
        }
		b = 2;
		c = 3;
    ```
endsnippet

snippet return
Als je een waarde moet returnen, is het netter om één
algemene returnwaarde te hebben. Dus:

i.p.v.
```
    if (x)
        return rx;
    else if (y)
        return ry;
    else if (z)
        return rz;
```
doe je:
```
    if (x)
        return rx;
    else if (y)
        return ry;
    return rz;
```
endsnippet

snippet afvangen
Als je meerdere uitzonderingen hebt, kun je beter niet in een if-else van breed
naar specifiek toewerken, maar juist andersom werken. Op die manier krijg je een
code die veel meer aan de linkerkant van het scherm blijft hangen. Dit maakt je
code ook gelijk veel leesbaarder. Dus:

i.p.v.
\`\`\`
	if (x<1000) {
		if (x<100) {
			if (x<10) {
				return 1;
			}
			else {
				return 2;
			}
		}
		else {
			return 3;
		}
	}
	else {
		return 4;
	}
\`\`\`
doe je:
\`\`\`
	if (x<10)
		return 1;
	if (x<100)
		return 2;
	if (x<1000)
		return 3;
	return 4;
\`\`\`

Vaak betekent dit ook dat je de {} kunt weglaten, omdat je maar één enkele regel
in je if hebt staan. Als je er meer hebt staan, moet je natuurlijk wel {}
gebruiken. 
endsnippet

snippet onvoldoende
Verwerk het bovenstaande commentaar in een herkansing voor deze opdracht. Deze
kunnen jullie inleveren op blackboard, bij de herkansingsopdracht. 
endsnippet

snippet prepost
Ik mis bij jullie de pre- en postcondities helaas nog. Deze zullen jullie nog
toe moeten voegen voor een voldoende. 
endsnippet

snippet namen
Ten slotte mis ik bij jullie helaas de namen in de code. Als je doorgeeft wie je
practicumpartner is, zal ik ook bij hem het cijfer toevoegen. 
endsnippet

snippet verbeter
Feedback:
Jullie hebben de opdracht $1 verbeterd. 
$0
Groeten, 
Niek Janssen
endsnippet
