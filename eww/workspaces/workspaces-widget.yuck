(deflisten workspaces :initial '{"workspaces": [], "markers": []}' "./workspaces/workspaces.js")

(defvar ws_margin 4)
(defvar ws_margin_extra 22)
(defvar ws_dotsize 27)

(defwidget workspace_bar []
  (eventbox
    :onscroll "echo {} | sed -e \"s/up/-1/g\" -e \"s/down/+1/g\" | xargs hyprctl dispatch workspace"
    (box
      :class 'widget-box'
      (overlay
        ; Only displays workspace state (has windows or not)
        :class "overlay"
        (box
          :class "module workspaces"
          :spacing 0
          :space-evenly false
          (for workspace in "${workspaces.workspaces}"
            (workspace_ws :workspace workspace)
          )
        )
        ; Workspace indicators
        (workspace_ws :workspace "${workspaces.markers[0]}")
        (workspace_ws :workspace "${workspaces.markers[1]}")
        (workspace_ws :workspace "${workspaces.markers[2]}")
        (workspace_ws :workspace "${workspaces.markers[3]}")
        (workspace_ws :workspace "${workspaces.markers[4]}")
        (workspace_ws :workspace "${workspaces.markers[5]}")
        (label :text "${arraylength(workspaces.workspaces)} ${arraylength(workspaces.markers)} ${workspaces.markers[0]}")
      )
    )
  )
)

(defwidget workspace_ws [workspace]
  (button
    :class "workspace-button workspace-button-${workspace.cls}"
    :style "
            margin-left:  ${workspace.left.dots * ws_dotsize + workspace.left.margins * ws_margin + workspace.left.spaces * ws_margin_extra}px;
            margin-left:  ${workspace.right.dots * ws_dotsize + workspace.right.margins * ws_margin + workspace.right.spaces * ws_margin_extra}px;
    "
  )
)
